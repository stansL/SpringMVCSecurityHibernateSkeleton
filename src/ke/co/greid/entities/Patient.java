package ke.co.greid.entities;

// Generated Apr 1, 2015 12:52:51 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Patient generated by hbm2java
 */
@Entity
@Table(name = "patient", catalog = "hims")
public class Patient implements java.io.Serializable {

	private Integer patientId;
	private Gender gender;
	private Country country;
	private BloodGroup bloodGroup;
	private MaritalStatus maritalStatus;
	private Religion religion;
	private String surname;
	private String firstName;
	private String middleName;
	private Date dateOfBirth;
	private String occupation;
	private String idPassport;
	private byte[] leftThumb;
	private byte[] rightThumb;
	private Set<CreditCard> creditCards = new HashSet<CreditCard>(0);
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<PatientHasMedicalInsurance> patientHasMedicalInsurances = new HashSet<PatientHasMedicalInsurance>(
			0);
	private Set<NextOfKin> nextOfKins = new HashSet<NextOfKin>(0);

	public Patient() {
	}

	public Patient(Gender gender, Country country, BloodGroup bloodGroup,
			MaritalStatus maritalStatus, Religion religion) {
		this.gender = gender;
		this.country = country;
		this.bloodGroup = bloodGroup;
		this.maritalStatus = maritalStatus;
		this.religion = religion;
	}

	public Patient(Gender gender, Country country, BloodGroup bloodGroup,
			MaritalStatus maritalStatus, Religion religion, String surname,
			String firstName, String middleName, Date dateOfBirth,
			String occupation, String idPassport, byte[] leftThumb,
			byte[] rightThumb, Set<CreditCard> creditCards,
			Set<Address> addresses,
			Set<PatientHasMedicalInsurance> patientHasMedicalInsurances,
			Set<NextOfKin> nextOfKins) {
		this.gender = gender;
		this.country = country;
		this.bloodGroup = bloodGroup;
		this.maritalStatus = maritalStatus;
		this.religion = religion;
		this.surname = surname;
		this.firstName = firstName;
		this.middleName = middleName;
		this.dateOfBirth = dateOfBirth;
		this.occupation = occupation;
		this.idPassport = idPassport;
		this.leftThumb = leftThumb;
		this.rightThumb = rightThumb;
		this.creditCards = creditCards;
		this.addresses = addresses;
		this.patientHasMedicalInsurances = patientHasMedicalInsurances;
		this.nextOfKins = nextOfKins;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "patient_id", unique = true, nullable = false)
	public Integer getPatientId() {
		return this.patientId;
	}

	public void setPatientId(Integer patientId) {
		this.patientId = patientId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "gender_id", nullable = false)
	public Gender getGender() {
		return this.gender;
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "country_code", nullable = false)
	public Country getCountry() {
		return this.country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "blood_group_id", nullable = false)
	public BloodGroup getBloodGroup() {
		return this.bloodGroup;
	}

	public void setBloodGroup(BloodGroup bloodGroup) {
		this.bloodGroup = bloodGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "marital_status_id", nullable = false)
	public MaritalStatus getMaritalStatus() {
		return this.maritalStatus;
	}

	public void setMaritalStatus(MaritalStatus maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "religion_id", nullable = false)
	public Religion getReligion() {
		return this.religion;
	}

	public void setReligion(Religion religion) {
		this.religion = religion;
	}

	@Column(name = "surname", length = 45)
	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	@Column(name = "first_name", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "middle_name", length = 45)
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_of_birth", length = 19)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Column(name = "occupation", length = 45)
	public String getOccupation() {
		return this.occupation;
	}

	public void setOccupation(String occupation) {
		this.occupation = occupation;
	}

	@Column(name = "id_passport", length = 45)
	public String getIdPassport() {
		return this.idPassport;
	}

	public void setIdPassport(String idPassport) {
		this.idPassport = idPassport;
	}

	@Column(name = "left_thumb")
	public byte[] getLeftThumb() {
		return this.leftThumb;
	}

	public void setLeftThumb(byte[] leftThumb) {
		this.leftThumb = leftThumb;
	}

	@Column(name = "right_thumb")
	public byte[] getRightThumb() {
		return this.rightThumb;
	}

	public void setRightThumb(byte[] rightThumb) {
		this.rightThumb = rightThumb;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<CreditCard> getCreditCards() {
		return this.creditCards;
	}

	public void setCreditCards(Set<CreditCard> creditCards) {
		this.creditCards = creditCards;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<PatientHasMedicalInsurance> getPatientHasMedicalInsurances() {
		return this.patientHasMedicalInsurances;
	}

	public void setPatientHasMedicalInsurances(
			Set<PatientHasMedicalInsurance> patientHasMedicalInsurances) {
		this.patientHasMedicalInsurances = patientHasMedicalInsurances;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
	public Set<NextOfKin> getNextOfKins() {
		return this.nextOfKins;
	}

	public void setNextOfKins(Set<NextOfKin> nextOfKins) {
		this.nextOfKins = nextOfKins;
	}

}
